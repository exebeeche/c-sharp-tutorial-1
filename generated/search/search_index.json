{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>In this tutorial, you create a game with bouncing balls. The tutorial includes five articles explaining how to build the game  step-by-step.</p>","title":"Overview"},{"location":"#the-game-concept","text":"<p>The game consists of two panels with bouncing balls and control elements.  Balls move within the boundaries of each panel at a specified speed. The control elements do the following:</p> <ul> <li>control speed of the balls</li> <li>display the number of collisions</li> <li>show full statistics on the balls</li> </ul> <p>When you finish, you have a complete game.</p> <p></p>","title":"The game concept"},{"location":"#what-you-learn","text":"<p>Use all steps of this tutorial to learn about the following tasks in the  Visual Studio Integrated Design Environment (IDE).</p> <ul> <li>Store objects, such as balls, in a List object. <li>Use a <code>foreach</code> method to iterate through items in a list.</li> <li>Keep track of ball collisions by using an event action.</li> <li>Make a timer that activates the balls.</li>","title":"What you learn"},{"location":"#prerequisites","text":"<p>The Visual Studio Integrated Design Environment (IDE) provides the tools you  need to create the app. To install Visual Studio IDE, see the Download page. To learn more, check the Welcome to the Visual Studio IDE.</p>","title":"Prerequisites"},{"location":"#steps","text":"<ul> <li>Create your Windows Forms project</li> <li>Create a ball</li> <li>Make the ball move</li> <li>Add balls to the form</li> <li>Save and run the game</li> </ul>","title":"Steps"},{"location":"add-balls-to-the-form/","text":"<p>In this article, you add two balls to the form using the Form\u00a0Design  window and write a code for bouncing balls using Form1.cs file. In this step, you need to use Form1.cs file to write the code.</p>","title":"Add balls to the form"},{"location":"add-balls-to-the-form/#prerequisites","text":"<p>This article builds on the previous one, Make the ball move. If you haven't read that article, go through that one first.</p>","title":"Prerequisites"},{"location":"add-balls-to-the-form/#add-the-timer-to-the-form","text":"<ol> <li> <p>In your Visual Studio project, select Form1 Forms Designer.</p> </li> <li> <p>In the Toolbox,    double-click Timer in the Toolbox or drag it to the form.    Timer** usually locates under the form.</p> </li> <li> <p>Select the Timer and double-click it. Visual Studio opens Form1.cs, and you can view the code behind the form.</p> </li> </ol>","title":"Add the timer to the form"},{"location":"add-balls-to-the-form/#add-the-balls-to-the-form","text":"<ol> <li>In the Toolbox, select the ball element and drag it to <code>panel1</code>.    </li> <li>Drug again the ball element to <code>panel2</code>.</li> <li>The <code>ball1</code> and <code>ball2</code> locate in <code>panel1</code> and <code>panel2</code> correspondingly.</li> <li>Set preferred colors to these balls using the ForeColor of the     Properties.</li> </ol>","title":"Add the balls to the form"},{"location":"add-balls-to-the-form/#create-the-ball-list","text":"<ol> <li> <p>After adding the Timer, you can see the code generated by default with Visual Studio. <pre><code>   using System;\n   using System.Collections.Generic;\n   using System.ComponentModel;\n   using System.Data;\n   using System.Drawing;\n   using System.Linq;\n   using System.Text;\n   using System.Threading.Tasks;\n   using System.Windows.Forms;\n\n   namespace WindowsFormsApp10\n   {\n       public partial class Form1 : Form\n       {\n           public Form1()\n           {\n               InitializeComponent();\n           }\n\n           private void timer1_Tick(object sender, EventArgs e)\n           {\n\n           }\n       }\n   }\n</code></pre></p> </li> <li> <p>Add the following code to add the ball list. In this game, you use two balls. In other games or apps, you can use the ball library and add as many balls as you need. <pre><code>   //Add the ball list and create the method that returns the balls from the list\n   private List&lt;ball&gt; balls;\n   private List&lt;ball&gt; GetAllBalls()\n   {\n       CreateOrInitBall(\"Ball1\", listBox1, label1, numericUpDown1, panel1, ball1);\n       CreateOrInitBall(\"Ball2\", listBox2, label2, numericUpDown2, panel2, ball2);\n       return new List&lt;ball&gt;\n       {\n           ball1,\n           ball2\n       };\n   }\n</code></pre></p> <p>In this code sample,   List <code>balls</code> stores objects from the <code>ball</code> class. </p> <p>The <code>GetAllBalls</code> method invokes the <code>CreateOrInitBall</code> method   that we will add later.   Also, the <code>GetAllBalls</code> method returns the balls from the list, which were     added on the previous step using the Form1 Forms Designer.</p> </li> <li> <p>Add the following code to initialize the ball list. <pre><code>   public Form1()\n   {\n       InitializeComponent();\n       InitBalls();\n   }\n   //Initialize the ball list\n   private void InitBalls()\n   {\n       balls = GetAllBalls();\n   }\n</code></pre></p> </li> <li> <p>Add the following code to connect the balls with the speed counter and     text field with statistics. <pre><code>   //Create the method that accepts the control elements as balls parameters\n   //and sets a dependency between the ball position and the control elements\n   private void CreateOrInitBall(string name, ListBox listbox, Label output, NumericUpDown num, Panel parent, Ball ball = null)\n   {\n       var currentBall = ball ?? new Ball();\n       currentBall.Name = name;\n\n       if (ball == null)\n       {\n           parent.Controls.Add(currentBall);\n       }\n\n       num.ValueChanged += (sender, e) =&gt;\n       {\n           currentBall.Speed = (int)(sender as NumericUpDown).Value;\n       };\n\n       currentBall.OnCollision += (oldX, oldY, newX, newY) =&gt;\n       {\n           output.Text = $\"#{currentBall.Name}: {currentBall.Counter} collisions\";\n           listbox.Items.Add($\"{DateTime.Now.ToString(\"HH:mm:ss\")} {oldX}{oldY} =&gt; {newX}{newY}\");\n       };\n   }\n</code></pre></p> <p>In this code sample, the <code>CreateOrInitBall</code> method uses the following    controls:</p> <ul> <li>ListBox for the changing direction statistics.</li> <li>Label for the collision number.</li> <li>NumericUpDown for the speed increasing/decreasing.</li> <li>Panel as ball territory.</li> </ul> </li> </ol>","title":"Create the ball list"},{"location":"add-balls-to-the-form/#run-your-app","text":"<p>In this step, you can run your app and check if everything is good.</p> <ol> <li>Press Ctrl\u00a0+\u00a0Shift\u00a0+\u00a0S or click the icon to save all files in the project.</li> <li>Press F5 or click the icon to run your project.</li> </ol>","title":"Run your app"},{"location":"add-balls-to-the-form/#next-steps","text":"<ul> <li>Save and run the game</li> </ul>","title":"Next steps"},{"location":"create-a-ball/","text":"<p>In this article, you create a custom UserControl element using an  external library. It is the best way to reuse this custom UserControl element in future  projects.</p>","title":"Create a ball"},{"location":"create-a-ball/#prerequisites","text":"<p>This article builds on the previous one, Create your Windows Forms project. If you have not read that article, go through that one first.</p>","title":"Prerequisites"},{"location":"create-a-ball/#create-an-external-library","text":"<ol> <li> <p>On the solution in Solution\u00a0Explorer,    right-click in the right part of the Visual Studio and select Add\u00a0&gt;\u00a0New\u00a0Project. </p> </li> <li> <p>On the Add\u00a0a\u00a0new\u00a0project page, choose C# in the All\u00a0    languages list, Windows in the All\u00a0platforms list, and     Desktop in the All project types list.    Select the Windows\u00a0Forms\u00a0Control\u00a0Library\u00a0(.NET\u00a0Framework) template,    and then click Next. </p> </li> <li> <p>On the Configure\u00a0your\u00a0new project page, enter the Ball in  the Project name box and then click Next.</p> </li> <li> <p>On the Additional\u00a0information page, select the .NET\u00a06\u00a0(Long-term support), and then click Create.</p> </li> <li> <p>Visual Studio creates the Ball library inside of the app.    This library is located in Solution\u00a0Explorer.    By default, you can see the UserControl form on Visual Studio.</p> </li> <li> <p>Rename the main .cs file to the ball.cs in the Solution\u00a0Explorer.</p> </li> <li> <p>Double-click PictureBox in the Toolbox or drag it to the form. Move the control to the upper-left corner of the form. Resize the form to the PictureBox size.</p> </li> </ol>","title":"Create an external library"},{"location":"create-a-ball/#add-the-ball-library-to-the-toolbox-of-the-form","text":"<p>Now you need to add the dependencies of the Ball library to your project.</p> <ol> <li> <p>Build the Ball library before adding the dependency into the app. Select Build\u00a0&gt;\u00a0Build Ball or press Ctrl\u00a0+\u00a0B.</p> </li> <li> <p>Select the References category in the Solution\u00a0Explorer of your app, right-click, and select Add\u00a0Reference.</p> </li> <li> <p>Select the Projects category, check the Ball, and click OK.</p> </li> <li> <p>Go to the design file of the form and you can see the Ball element in the Toolbox.</p> </li> </ol> <p>If you cannot see the Ball element in the Toolbox then add the  UserControl item to the Toolbox.</p> <ol> <li> <p>Right-click anywhere on the Toolbox and select Choose\u00a0item\u00a0....</p> </li> <li> <p>On the Choose\u00a0Toolbox\u00a0Items window, select the UserControl     checkbox located in the .NET\u00a0Framework\u00a0Components tab,    and click OK.</p> </li> </ol>","title":"Add the Ball library to the Toolbox of the form"},{"location":"create-a-ball/#draw-a-ball","text":"<ol> <li> <p>In your Visual Studio project, select the Ball Forms Designer.</p> </li> <li> <p>On the menu bar, select View\u00a0&gt;\u00a0Code or right-click anywhere     on the form and select View\u00a0Code.    File ball.cs appears so that you can view the code behind the form.    You can also use F7 to open the code.</p> </li> <li> <p>You can see the code generated by default with Visual Studio. <pre><code>   using System;\n   using System.Collections.Generic;\n   using System.ComponentModel;\n   using System.Drawing;\n   using System.Data;\n   using System.Linq;\n   using System.Text;\n   using System.Threading.Tasks;\n   using System.Windows.Forms;\n\n   namespace BouncingBalls\n   {\n       public partial class Ball: UserControl\n       {\n           public Ball()\n           {\n               InitializeComponent();\n           }\n       }\n   }\n</code></pre></p> </li> <li> <p>Add <code>System.Drawing.Drawing2D;</code> namespace into the list using the <code>using</code> directive and change the namespace to the BouncingBalls.</p> </li> <li> <p>Add the following code to draw a circle. Place this code sample into the <code>Ball()</code> class right after the <code>InitializeComponent();</code> method. <pre><code>   //Create a ball and assign to the ball the pictureBox1 element\n   public Ball()\n   {\n       InitializeComponent();\n       GraphicsPath path = new GraphicsPath();\n       path.AddEllipse(0, 0, 50, 50);\n       Region rgn = new Region(path);\n       pictureBox1.Region = rgn;\n   }\n</code></pre></p> </li> </ol> <p>In this code sample, the GraphicsPath class creates the connected lines, and you can use them as a circle. The AddEllipse method adds an ellipse to the current path, which uses coordinates and circle parameters. The variable <code>rgn</code> of the Region class defines a new region for the circle which is pictureBox1.</p> <p>\u00a06. Add the following code to define the color of the ball. Place this code sample right after the previous class. <pre><code>   //Specify the color of balls using the ForeColor parameter\n   public Color FigureColor { get; set; }\n   protected override void OnPaint(PaintEventArgs e)\n        {\n            pictureBox1.BackColor = ForeColor;\n            base.OnPaint(e);\n        }\n</code></pre></p> <p>In this code sample, the Color class represents the color of the ball. Then OnPaint method paints the ball color using the ForeColor property of the ball.</p> <p>\u00a07. In this step, you can see the following code in the ball.cs file. <pre><code>   using System;\n   using System.Collections.Generic;\n   using System.ComponentModel;\n   using System.Drawing;\n   using System.Drawing.Drawing2D;\n   using System.Data;\n   using System.Linq;\n   using System.Text;\n   using System.Threading.Tasks;\n   using System.Windows.Forms;\n\n   namespace Ball\n   {\n       public partial class Ball : UserControl\n       {\n           //Create a ball and assign to the ball the pictureBox1 element\n           public Ball()\n           {\n               InitializeComponent();\n               GraphicsPath path = new GraphicsPath();\n               path.AddEllipse(0, 0, 50, 50);\n               Region rgn = new Region(path);\n               pictureBox1.Region = rgn;\n           }\n           //Specify the color of balls using the ForeColor parameter\n           public Color FigureColor { get; set; }\n           protected override void OnPaint(PaintEventArgs e)\n           {\n               pictureBox1.BackColor = ForeColor;\n               base.OnPaint(e);\n           }\n       }\n   }\n</code></pre></p>","title":"Draw a ball"},{"location":"create-a-ball/#run-your-app","text":"<p>In this step, you can run your app and check if everything is good.</p> <ol> <li>Press Ctrl\u00a0+\u00a0Shift\u00a0+\u00a0S or click the icon to save all files in the project.</li> <li>Press F5 or click the icon to run your project.</li> </ol>","title":"Run your app"},{"location":"create-a-ball/#next-steps","text":"<ul> <li>Make the ball move</li> <li>Add balls to the form</li> <li>Save and run the game</li> </ul>","title":"Next steps"},{"location":"create-your-windows-forms-project/","text":"<p>The first step to building your app is a Windows Forms App project. In this article, you learn how to create a form and add elements to it.</p> <ol> <li> <p>Open Visual Studio.</p> </li> <li> <p>On the start window, select Create\u00a0a\u00a0new\u00a0project.    </p> </li> <li> <p>On the Create\u00a0a\u00a0new\u00a0project window,    search for Windows Forms.    Also, you can use the filters to cut the options list. Choose C# in the All\u00a0languages list,    Windows in the All\u00a0platforms list,    and Desktop in the All\u00a0project\u00a0types list.</p> </li> <li> <p>Select the Windows\u00a0Forms\u00a0App\u00a0(.NET\u00a0Framework)    template for C#, and then click Next. </p> </li> <li> <p>In the Configure your new project window, name your project Bouncing     balls, then select Create.</p> </li> </ol>  <p>Visual Studio creates a solution for your app. A solution is a container for all the projects and files that your app needs.</p> <p>In this step, Visual Studio displays an empty form in the Windows\u00a0Form\u00a0Designer. Now you can continue with properties and layout elements.</p>","title":"Create your Windows Forms project"},{"location":"create-your-windows-forms-project/#add-form-properties","text":"<ol> <li> <p>In the Windows\u00a0Form\u00a0Designer, select anywhere in Form1.    The Properties window is usually pinned in the lower right of Visual     Studio.        This section controls various properties, such as foreground and     background color, title text that appears at the top of the form, the     size of the form, and many other properties.        If you do not see Properties,    select View\u00a0&gt;\u00a0Properties\u00a0Window or press F4.</p> </li> <li> <p>Find the Text property in the Properties window. The Appearance category includes the Text property. Depending on how the properties list is sorted, you may need to scroll down. Enter the value Bouncing balls, and then press Enter.        Your form now has the text Bouncing balls in its title bar.    </p> </li> <li> <p>Set the size of the form using the Size property to 850 pixels wide by 700 pixels tall. To change the form size, select it and drag the handle to resize the form.        You can also resize the form by dragging its edges or dragging the handle     until the correct size appears as the Size value in the Properties window.        The drag handle is a small white square in the lower-right corner of the form.</p> </li> </ol>","title":"Add form properties"},{"location":"create-your-windows-forms-project/#add-layout-elements","text":"<ol> <li> <p>Select the Toolbox tab on the left side of the Visual Studio.    If you do not see it,    select View\u00a0&gt;\u00a0Toolbox from the menu bar or press     Ctrl+Alt+X.    The Toolbox tab has a few categories to organize form     elements.         You can use the All Windows Forms category or any specific     category to select an element. Use drag-and-drop actions to order the     categories.</p> </li> <li> <p>Double-click Label in the Toolbox or drag it to the form. Move the control to the upper-left corner of the form.</p> </li> <li> <p>Double-click NumericUpDown in the     Toolbox or drag it to the form. Move the control just below the     Label control.</p> </li> <li> <p>Double-click Panel in the Toolbox or drag it to the form. Move the control just below the NumericUpDown control. Set the Panel size to 350, 320.</p> </li> <li> <p>Double-click ListBox in the Toolbox or drag it to the form. Move the control just below the Panel control. Set the ListBox size to 350, 160.</p> </li> </ol>  <p>Note</p> <p>In this step, you may not change other properties of these controls.      You will change the behavior of the controls during the next steps.</p>  <p>\u00a06. Select anywhere on the form.    Press Ctrl\u00a0+\u00a0A buttons. You will select all control elements.    Press Ctrl\u00a0+\u00a0C and then Ctrl\u00a0+\u00a0V buttons.    Use the arrows icon to move selected elements to the right part of the form.</p> <p>\u00a07. In the end, your form should look like the image below.    </p>","title":"Add layout elements"},{"location":"create-your-windows-forms-project/#run-your-app","text":"<p>In this step, you can already run your app to check all layout elements.</p> <ol> <li>Press Ctrl\u00a0+\u00a0Shift\u00a0+\u00a0S to save all files in the project.</li> <li>Press F5 to run your project.</li> </ol>","title":"Run your app"},{"location":"create-your-windows-forms-project/#next-steps","text":"<ul> <li>Create a ball</li> <li>Make the ball move</li> <li>Add balls to the form</li> <li>Save and run the game</li> </ul>","title":"Next steps"},{"location":"make-the-ball-move/","text":"<p>In this article, you create a movement logic for the ball. You have already the form with the layout and the library with the ball.</p> <p>In this step, you need to use only the ball.cs file to write the code.</p>","title":"Make the ball move"},{"location":"make-the-ball-move/#prerequisites","text":"<p>This article builds on the previous one, Create a ball.  If you have not read that article, go through that one first.</p>","title":"Prerequisites"},{"location":"make-the-ball-move/#add-position-variables","text":"<ol> <li> <p>Right after the <code>OnPaint(PaintEventArgs e)</code> class, add the following code to declare the variables. <pre><code>   //Declare the variables of the ball position\n   int dx;\n   int dy;\n</code></pre></p> </li> <li> <p><code>dx</code> is the X position.</p> </li> <li> <p><code>dy</code> is the Y position.</p> </li> <li> <p>Add the following code to initiate the ball position. <pre><code>//Initiate the ball position\n   public void Init(int left, int top, int dx, int dy)\n\n   {\n       Left = left;\n       Top = top;\n       this.dx = dx;\n       this.dy = dy;\n   }\n   //Enumerate four directions\n   public enum Direction\n   {\n       Left, Right, Top, Bottom\n   }\n</code></pre>     In this code sample, the Init method initiates the ball position   variables and declares them.   Also,   the Enum class provides the Direction enumeration.</p> </li> <li> <p>Add the following code to create the properties of the current direction. <pre><code>   //Create properties of the current direction\n   public Direction CurrentDirectionX { get; private set; }\n   public Direction CurrentDirectionY { get; private set; }\n</code></pre>     In this code sample, the <code>CurrentDirectionX</code> and <code>CurrentDirectionY</code>  properties have <code>get</code> and <code>set</code> accessors to read and write the values of the properties.</p> </li> <li> <p>Add the following code to set the speed property and check if speed has a negative value. <pre><code>   //Declare the speed variable and property\n   private int speed;\n   public int Speed\n   {\n       get =&gt; speed;\n       set\n       {\n           OnSpeedChanged(value);\n       }\n   }\n   //Create the method that checks if the speed value is not negative and assigns \n   //the new values for the `dx` and `dy` variables depending on the `speed` \n   //value.\n   private void OnSpeedChanged(int value)\n   {\n       if (value &gt;= 0)\n       {\n           speed = value;\n           dx = dx != 0 ? dx / Math.Abs(dx) * value : value;\n           dy = dy != 0 ? dy / Math.Abs(dy) * value : value;\n       }\n   }\n</code></pre>     In this code sample, declare the <code>speed</code> variable. Then declare the <code>Speed</code>   property with <code>get</code> and <code>set</code> accessors. The <code>get</code> accessor reads the <code>speed</code> value.</p> <p>The <code>set</code> accessor uses the <code>OnSpeedChanged</code> method that checks if the speed value is not negative and assigns   the new values for the <code>dx</code> and <code>dy</code> variables depending on the <code>speed</code> value.</p> </li> <li> <p>Add the following code sample to install the counter and update the ball position. <pre><code>   //Declare the Counter property\n   public int Counter { get; private set; }\n   //Create an action event with four directions\n   public event Action&lt;Direction, Direction, Direction, Direction&gt; OnCollision;\n   //Create the method that updates the ball position and counts collisions\n   public void UpdatePosition()\n   {\n       if (Left + dx &lt;= 0 || Left + Width + dx &gt;= Parent.Width)\n       {\n           Counter++;\n           OnCollision?.Invoke(CurrentDirectionX, CurrentDirectionY, dx &gt; 0 ? Direction.Right : Direction.Left, CurrentDirectionY);\n           dx = -dx;\n\n       }\n\n       if (Top + dy &lt;= 0 || Top + Height + dy &gt;= Parent.Height)\n       {\n           Counter++;\n           OnCollision?.Invoke(CurrentDirectionX, CurrentDirectionY, CurrentDirectionX, dy &gt; 0 ? Direction.Bottom : Direction.Top);\n           dy = -dy;\n       }\n\n       CurrentDirectionX = dx &gt; 0 ? Direction.Left : Direction.Right;\n       CurrentDirectionY = dy &gt; 0 ? Direction.Top : Direction.Bottom;\n       Left += dx;\n       Top += dy;\n   }\n</code></pre></p> <p>In this code sample, declare the <code>Counter</code> property with <code>get</code> and <code>set</code>   accessors.  Then declare the <code>OnCollision</code> event that reacts to the direction    change.  The <code>UpdatePosition</code> method contains a few checks:</p> <ul> <li> <p>If the left position of the ball is less or equal to zero, or the left     position of the ball is more or equal to the panel width, then the  <code>Counter</code> increments.</p> </li> <li> <p>If the top position of the ball is less or equal to zero, or the top  position of the ball is more or equal to the panel height, then the  <code>Counter</code> increments again.</p> </li> </ul> <p>Each check means the ball hits the panel boundary. At this moment, the    <code>OnCollision</code> event is invoked, and the direction is inverted. Then, the <code>CurrentDirectionX</code> and <code>CurrentDirectionY</code> variables of the ball position are checked, and the ball position is updated. </p> </li> </ol>","title":"Add position variables"},{"location":"make-the-ball-move/#run-your-app","text":"<p>In this step, you can run your app and check if everything is good.</p> <ol> <li>Press Ctrl\u00a0+\u00a0Shift\u00a0+\u00a0S or click the icon to save all files in the project.</li> <li>Press F5 or click the icon to run your project.</li> </ol>","title":"Run your app"},{"location":"make-the-ball-move/#next-steps","text":"<ul> <li>Add balls to the form</li> <li>Save and run the game</li> </ul>","title":"Next steps"},{"location":"save-and-run-the-game/","text":"<p>You can run your app at any time while you work on it. After you add the code in the previous section, the Bouncing balls game is  complete.</p>","title":"Save and run your project"},{"location":"save-and-run-the-game/#run-the-app","text":"<ol> <li>Select the Start button to run the application.</li> <li>The app runs in the separated window along with Diagnostics\u00a0Tools and     Output windows running in the background.</li> <li>Increase the NumericUpDown control for each ball and make balls move.</li> <li>See the displayed statistics about collisions.</li> </ol>  <p>Tip</p> <p>You can reduce the list of included namespaces in ball.cs and Form1.cs files. Right-click anywhere on the code and select Remove and Sort Usings. This action removes unused namespaces.</p>","title":"Run the app"},{"location":"save-and-run-the-game/#next-steps","text":"<p>Congratulations! You finished this tutorial and created a game with  bouncing balls. You performed these tasks in the Visual Studio IDE:</p> <ul> <li>Created a Visual Studio project that uses Windows Forms.</li> <li>Added Labels, NumericUpDown, Panels, and ListBox controls, and a Timer.</li> <li>Wrote an external library with the ball and learn how to work with it.</li> <li>Wrote the code with makes the balls move.</li> </ul> <p>Continue learning with another tutorial series on how to create an app.</p> <ul> <li>Create a picture viewer app</li> <li>Create a math quiz</li> <li>Create a matching game</li> </ul>","title":"Next steps"}]}